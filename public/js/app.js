// –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram Raffle Stars
class RaffleApp {
  constructor() {
    this.isInitialized = false;
    this.currentRaffle = null;
    this.currentSettings = null;
    this.userData = null;
    this.isParticipating = false;
    this.connectionRetries = 0;
    this.maxConnectionRetries = 5;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    this.state = {
      isLoading: true,
      isConnected: false,
      isAuthenticated: false,
      lastUpdate: null
    };
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  async init() {
    if (this.isInitialized) return;

    try {
      console.log('üöÄ Initializing Raffle App...');
      
      UI.showLoading(CONFIG.TEXTS.LOADING);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp
      this.initTelegramWebApp();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupEventHandlers();
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è
      await this.authenticate();
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
      await this.connectWebSocket();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await this.loadInitialData();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
      UI.showScreen('main');
      
      this.isInitialized = true;
      this.state.isLoading = false;
      
      console.log('‚úÖ Raffle App initialized successfully');

    } catch (error) {
      console.error('‚ùå Failed to initialize app:', error);
      this.handleInitError(error);
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  initTelegramWebApp() {
    if (!CONFIG.TELEGRAM_WEB_APP) {
      console.warn('‚ö†Ô∏è Telegram WebApp not available');
      return;
    }

    const webapp = CONFIG.TELEGRAM_WEB_APP;
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    webapp.ready();
    webapp.expand();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É
    webapp.setBackgroundColor('#1a1a2e');
    webapp.setHeaderColor('#16213e');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    webapp.MainButton.hide();
    
    console.log('‚úÖ Telegram WebApp configured');
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  setupEventHandlers() {
    // –°–æ–±—ã—Ç–∏—è UI
    UI.on('bid_clicked', () => this.handleBidClick());
    UI.on('retry_clicked', () => this.handleRetryClick());

    // –°–æ–±—ã—Ç–∏—è WebSocket
    SOCKET.on('status_changed', (status) => this.handleConnectionStatusChange(status));
    SOCKET.on('authenticated', (data) => this.handleAuthenticated(data));
    SOCKET.on('auth_error', (error) => this.handleAuthError(error));
    
    // –°–æ–±—ã—Ç–∏—è –ª–æ—Ç–µ—Ä–µ–∏
    SOCKET.on('raffle_update', (data) => this.handleRaffleUpdate(data));
    SOCKET.on('new_bid', (data) => this.handleNewBid(data));
    SOCKET.on('raffle_completed', (data) => this.handleRaffleCompleted(data));
    SOCKET.on('you_won', (data) => this.handleYouWon(data));
    SOCKET.on('new_raffle', (data) => this.handleNewRaffle(data));
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
    SOCKET.on('user_stats_update', (data) => this.handleUserStatsUpdate(data));
    SOCKET.on('transaction_error', (data) => this.handleTransactionError(data));
    SOCKET.on('refund_notification', (data) => this.handleRefundNotification(data));
    
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    SOCKET.on('admin_message', (data) => this.handleAdminMessage(data));
    SOCKET.on('system_message', (data) => this.handleSystemMessage(data));
    SOCKET.on('maintenance_notification', (data) => this.handleMaintenanceNotification(data));
    
    // –°–æ–±—ã—Ç–∏—è —Å–µ—Ç–∏
    window.addEventListener('online', () => this.handleNetworkChange(true));
    window.addEventListener('offline', () => this.handleNetworkChange(false));
  }

  // === –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ===

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async authenticate() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
      const existingToken = UTILS.storage.get(CONFIG.STORAGE_KEYS.AUTH_TOKEN);
      if (existingToken && UTILS.isTokenValid(existingToken)) {
        const verifyResult = await API.verifyToken();
        if (verifyResult.success) {
          this.userData = verifyResult.user;
          this.state.isAuthenticated = true;
          return;
        }
      }

      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
      const telegramUser = API.getTelegramUser();
      if (!telegramUser) {
        throw new Error('Telegram user data not available');
      }

      const authResult = await API.authenticateWithTelegram(telegramUser);
      if (authResult.success) {
        this.userData = authResult.user;
        this.state.isAuthenticated = true;
        console.log('‚úÖ User authenticated:', this.userData.telegram_id);
      } else {
        throw new Error(authResult.message || 'Authentication failed');
      }

    } catch (error) {
      console.error('‚ùå Authentication failed:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
    }
  }

  // === –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï ===

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
  async connectWebSocket() {
    try {
      await SOCKET.connect();
      this.state.isConnected = true;
      console.log('‚úÖ WebSocket connected');
    } catch (error) {
      console.error('‚ùå WebSocket connection failed:', error);
      
      if (this.connectionRetries < this.maxConnectionRetries) {
        this.connectionRetries++;
        console.log(`üîÑ Retrying WebSocket connection (${this.connectionRetries}/${this.maxConnectionRetries})`);
        await UTILS.delay(2000 * this.connectionRetries);
        return await this.connectWebSocket();
      }
      
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
  }

  // === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  async loadInitialData() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [raffleData, globalStats, userBalance] = await Promise.allSettled([
        API.getCurrentRaffle(),
        API.getGlobalStats(),
        API.getUserBalance()
      ]);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏
      if (raffleData.status === 'fulfilled' && raffleData.value.success) {
        this.currentRaffle = raffleData.value.raffle;
        this.currentSettings = raffleData.value.settings;
        this.updateRaffleUI();
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      if (globalStats.status === 'fulfilled' && globalStats.value.success) {
        UI.updateGlobalStats(globalStats.value.stats);
        UI.updateRecentWinners(globalStats.value.stats.recent_winners);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (userBalance.status === 'fulfilled' && userBalance.value.success) {
        this.userData.stars_balance = userBalance.value.balance;
        UI.updateUserData(this.userData);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ–∫—É—â–µ–π –ª–æ—Ç–µ—Ä–µ–µ
      await this.checkUserParticipation();

    } catch (error) {
      console.error('‚ùå Failed to load initial data:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ—Ç–µ—Ä–µ–µ
  async checkUserParticipation() {
    if (!this.currentRaffle) return;

    try {
      const statusData = await API.getRaffleStatus();
      if (statusData.success && statusData.participants) {
        this.isParticipating = statusData.participants.some(
          p => p.telegram_id === this.userData.telegram_id
        );
        this.updateBidButtonState();
      }
    } catch (error) {
      console.error('‚ùå Failed to check user participation:', error);
    }
  }

  // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô UI ===

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Å—Ç–∞–≤–∫–∏
  async handleBidClick() {
    if (this.isParticipating) {
      UI.showNotification('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –ª–æ—Ç–µ—Ä–µ–µ', CONFIG.NOTIFICATION_TYPES.WARNING);
      return;
    }

    if (!this.currentSettings || !this.userData) {
      UI.showNotification('–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', CONFIG.NOTIFICATION_TYPES.ERROR);
      return;
    }

    const bidAmount = this.currentSettings.bid_amount;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if (this.userData.stars_balance < bidAmount) {
      UI.showNotification(
        `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –ù—É–∂–Ω–æ: ${bidAmount} ‚≠ê`,
        CONFIG.NOTIFICATION_TYPES.ERROR
      );
      return;
    }

    try {
      UI.updateBidButton('loading');
      UTILS.vibrate('light');

      // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
      const invoice = await API.createPaymentInvoice(
        bidAmount,
        `–°—Ç–∞–≤–∫–∞ –≤ –ª–æ—Ç–µ—Ä–µ–µ #${this.currentRaffle?.id || 'unknown'}`
      );

      if (!invoice.success) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã');
      }

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–ø–ª–∞—Ç—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç Telegram Stars API)
      await this.processPayment(invoice, bidAmount);

    } catch (error) {
      console.error('‚ùå Bid error:', error);
      UI.showNotification(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏', CONFIG.NOTIFICATION_TYPES.ERROR);
      this.updateBidButtonState();
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã
  async processPayment(invoice, amount) {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Stars
      // –ü–æ–∫–∞ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
      await UTILS.delay(2000);
      
      const transactionId = `mock_${Date.now()}`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const bidResult = await API.placeBid(amount, transactionId);
      
      if (bidResult.success) {
        this.isParticipating = true;
        this.userData.stars_balance -= amount;
        
        UI.updateUserData(this.userData);
        UI.updateBidButton('participating');
        UI.updateUserParticipation(true);
        
        UI.showNotification('–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –£–¥–∞—á–∏!', CONFIG.NOTIFICATION_TYPES.SUCCESS);
        UTILS.vibrate('medium');
        
        if (bidResult.raffle_completed) {
          UI.showNotification('–õ–æ—Ç–µ—Ä–µ—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è!', CONFIG.NOTIFICATION_TYPES.INFO);
        }
      } else {
        throw new Error(bidResult.message || '–°—Ç–∞–≤–∫–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞');
      }

    } catch (error) {
      console.error('‚ùå Payment processing error:', error);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
  async handleRetryClick() {
    try {
      UI.showLoading('–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
      await this.init();
    } catch (error) {
      UI.showError(error.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', () => this.handleRetryClick());
    }
  }

  // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô WEBSOCKET ===

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  handleConnectionStatusChange(status) {
    this.state.isConnected = (status === CONFIG.CONNECTION_STATUS.CONNECTED);
    
    let message, type;
    switch (status) {
      case CONFIG.CONNECTION_STATUS.CONNECTED:
        message = CONFIG.TEXTS.CONNECTED;
        type = CONFIG.NOTIFICATION_TYPES.SUCCESS;
        this.connectionRetries = 0;
        break;
      case CONFIG.CONNECTION_STATUS.CONNECTING:
        message = CONFIG.TEXTS.CONNECTING;
        type = CONFIG.NOTIFICATION_TYPES.INFO;
        break;
      case CONFIG.CONNECTION_STATUS.RECONNECTING:
        message = CONFIG.TEXTS.RECONNECTING;
        type = CONFIG.NOTIFICATION_TYPES.WARNING;
        break;
      case CONFIG.CONNECTION_STATUS.DISCONNECTED:
        message = CONFIG.TEXTS.DISCONNECTED;
        type = CONFIG.NOTIFICATION_TYPES.ERROR;
        break;
    }
    
    if (this.isInitialized) {
      UI.showNotification(message, type, 2000);
    }
  }

  // –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è WebSocket
  handleAuthenticated(data) {
    console.log('‚úÖ WebSocket authenticated');
    SOCKET.requestRaffleStatus();
    SOCKET.requestGlobalStats();
    SOCKET.requestRecentWinners();
  }

  // –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket
  handleAuthError(error) {
    console.error('‚ùå WebSocket auth error:', error);
    UI.showNotification('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', CONFIG.NOTIFICATION_TYPES.ERROR);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–∏
  handleRaffleUpdate(data) {
    if (data.raffle) {
      this.currentRaffle = data.raffle;
    }
    if (data.settings) {
      this.currentSettings = data.settings;
    }
    
    this.updateRaffleUI();
    this.state.lastUpdate = new Date();
  }

  // –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
  handleNewBid(data) {
    if (data.raffle) {
      this.currentRaffle = { ...this.currentRaffle, ...data.raffle };
      this.updateRaffleUI();
    }
    
    UTILS.vibrate('light');
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–∏
  handleRaffleCompleted(data) {
    UI.showNotification(
      `–õ–æ—Ç–µ—Ä–µ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª ${UTILS.formatStars(data.winner.prize)}`,
      CONFIG.NOTIFICATION_TYPES.SUCCESS,
      5000
    );
    
    this.isParticipating = false;
    this.updateBidButtonState();
    UTILS.vibrate('medium');
  }

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∏–≥—Ä–∞–ª
  handleYouWon(data) {
    UI.showWin(data.prize);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.userData.stars_balance += data.prize;
    this.userData.total_winnings = (this.userData.total_winnings || 0) + data.prize;
    UI.updateUserData(this.userData);
    
    this.isParticipating = false;
  }

  // –ù–æ–≤–∞—è –ª–æ—Ç–µ—Ä–µ—è
  handleNewRaffle(data) {
    this.currentRaffle = data.raffle;
    this.currentSettings = data.settings;
    this.isParticipating = false;
    
    this.updateRaffleUI();
    this.updateBidButtonState();
    
    UI.showNotification('–ù–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è –ª–æ—Ç–µ—Ä–µ—è!', CONFIG.NOTIFICATION_TYPES.INFO);
  }

  // === –î–†–£–ì–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  handleUserStatsUpdate(data) {
    if (data.stars_balance !== undefined) {
      this.userData.stars_balance = data.stars_balance;
      UI.updateUserData(this.userData);
    }
  }

  // –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  handleTransactionError(data) {
    UI.showNotification(data.message || '–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', CONFIG.NOTIFICATION_TYPES.ERROR);
    this.updateBidButtonState();
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
  handleRefundNotification(data) {
    UI.showNotification(
      `–í–æ–∑–≤—Ä–∞—Ç: ${UTILS.formatStars(data.amount)}. ${data.reason}`,
      CONFIG.NOTIFICATION_TYPES.INFO,
      5000
    );
    
    this.userData.stars_balance += data.amount;
    UI.updateUserData(this.userData);
  }

  // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  handleAdminMessage(data) {
    UI.showNotification(
      `üì¢ ${data.message}`,
      CONFIG.NOTIFICATION_TYPES.WARNING,
      10000
    );
  }

  // –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  handleSystemMessage(data) {
    const type = {
      info: CONFIG.NOTIFICATION_TYPES.INFO,
      success: CONFIG.NOTIFICATION_TYPES.SUCCESS,
      warning: CONFIG.NOTIFICATION_TYPES.WARNING,
      error: CONFIG.NOTIFICATION_TYPES.ERROR
    }[data.type] || CONFIG.NOTIFICATION_TYPES.INFO;
    
    UI.showNotification(data.message, type, 8000);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö
  handleMaintenanceNotification(data) {
    UI.showNotification(
      `üîß ${data.message} (${data.duration})`,
      CONFIG.NOTIFICATION_TYPES.WARNING,
      15000
    );
  }

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  handleNetworkChange(isOnline) {
    if (isOnline) {
      UI.showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', CONFIG.NOTIFICATION_TYPES.SUCCESS);
      if (!this.state.isConnected) {
        this.connectWebSocket();
      }
    } else {
      UI.showNotification('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', CONFIG.NOTIFICATION_TYPES.ERROR);
    }
  }

  // === –û–ë–ù–û–í–õ–ï–ù–ò–ï UI ===

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ª–æ—Ç–µ—Ä–µ–∏
  updateRaffleUI() {
    if (!this.currentRaffle || !this.currentSettings) return;
    
    UI.updateRaffleData(this.currentRaffle, this.currentSettings);
    this.updateBidButtonState();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–∫–∏
  updateBidButtonState() {
    if (!this.currentSettings) {
      UI.updateBidButton('disabled', { reason: '–ó–∞–≥—Ä—É–∑–∫–∞...' });
      return;
    }

    if (this.isParticipating) {
      UI.updateBidButton('participating');
      UI.updateUserParticipation(true);
      return;
    }

    if (!this.state.isConnected) {
      UI.updateBidButton('disabled', { reason: '–ù–µ—Ç —Å–≤—è–∑–∏' });
      return;
    }

    if (!this.userData || this.userData.stars_balance < this.currentSettings.bid_amount) {
      UI.updateBidButton('disabled', { reason: '–ú–∞–ª–æ –∑–≤–µ–∑–¥' });
      return;
    }

    if (!this.currentRaffle || this.currentRaffle.status !== 'active') {
      UI.updateBidButton('disabled', { reason: '–õ–æ—Ç–µ—Ä–µ—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞' });
      return;
    }

    if (this.currentRaffle.current_participants >= this.currentRaffle.required_participants) {
      UI.updateBidButton('disabled', { reason: '–õ–æ—Ç–µ—Ä–µ—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∞' });
      return;
    }

    UI.updateBidButton('ready');
    UI.updateUserParticipation(false);
  }

  // === –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ===

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  handleInitError(error) {
    console.error('‚ùå Init error:', error);
    UI.showError(
      error.message || '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      () => this.handleRetryClick()
    );
  }

  // === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  getState() {
    return { ...this.state };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserData() {
    return this.userData ? { ...this.userData } : null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ª–æ—Ç–µ—Ä–µ–∏
  getCurrentRaffle() {
    return this.currentRaffle ? { ...this.currentRaffle } : null;
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  async refresh() {
    try {
      await this.loadInitialData();
    } catch (error) {
      console.error('‚ùå Refresh error:', error);
      UI.showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', CONFIG.NOTIFICATION_TYPES.ERROR);
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', async () => {
  try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    window.APP = new RaffleApp();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await APP.init();
    
    console.log('üé≤ Telegram Raffle Stars app started successfully!');
  } catch (error) {
    console.error('‚ùå Failed to start app:', error);
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
if (typeof module !== 'undefined' && module.exports) {
  module.exports = RaffleApp;
}