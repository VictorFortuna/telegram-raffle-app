const TelegramBot = require('node-telegram-bot-api');

class TelegramService {
  constructor() {
    this.bot = null;
    this.webhookUrl = process.env.TELEGRAM_WEBHOOK_URL;
    this.initialize();
  }

  initialize() {
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      console.warn('‚ö†Ô∏è  TELEGRAM_BOT_TOKEN not provided. Telegram integration disabled.');
      return;
    }

    try {
      this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);
      
      if (process.env.NODE_ENV === 'production' && this.webhookUrl) {
        this.setupWebhook();
      } else if (process.env.NODE_ENV === 'development') {
        this.bot.startPolling();
        console.log('üîÑ Telegram bot polling started (development mode)');
      }

      this.setupCommands();
      console.log('‚úÖ Telegram service initialized');
    } catch (error) {
      console.error('‚ùå Failed to initialize Telegram service:', error);
    }
  }

  async setupWebhook() {
    try {
      await this.bot.setWebHook(this.webhookUrl);
      console.log('‚úÖ Telegram webhook set:', this.webhookUrl);
    } catch (error) {
      console.error('‚ùå Failed to set webhook:', error);
    }
  }

  setupCommands() {
    if (!this.bot) return;

    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id;
      const welcomeMessage = `
üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Raffle Stars!

–≠—Ç–æ –ª–æ—Ç–µ—Ä–µ—è, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å Telegram Stars!

üéÆ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
2. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –∏—Å–ø–æ–ª—å–∑—É—è Telegram Stars
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏
4. –ï—Å–ª–∏ –ø–æ–≤–µ–∑–µ—Ç - –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–∑!

üí´ –£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ!
      `;

      const keyboard = {
        inline_keyboard: [[{
          text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: { url: process.env.MINI_APP_URL || 'https://your-app.railway.app' }
        }]]
      };

      this.bot.sendMessage(chatId, welcomeMessage, {
        reply_markup: keyboard
      });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.onText(/\/help/, (msg) => {
      const chatId = msg.chat.id;
      const helpMessage = `
‚ÑπÔ∏è –ü–æ–º–æ—â—å - Telegram Raffle Stars

üéØ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:
‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –≤ Telegram Stars
‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞–±–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —á–µ—Å—Ç–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 70% –æ—Ç –æ–±—â–µ–≥–æ –±–∞–Ω–∫–∞
‚Ä¢ 30% –∏–¥–µ—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

‚ö° –ö–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support_username
      `;

      this.bot.sendMessage(chatId, helpMessage);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /stats
    this.bot.onText(/\/stats/, async (msg) => {
      const chatId = msg.chat.id;
      try {
        // –ó–¥–µ—Å—å –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const statsMessage = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –∑–∞–≥—Ä—É–∑–∫–∞...
üé≤ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π: –∑–∞–≥—Ä—É–∑–∫–∞...
üí∞ –í—ã–¥–∞–Ω–æ –ø—Ä–∏–∑–æ–≤: –∑–∞–≥—Ä—É–∑–∫–∞... ‚≠ê

–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!
        `;

        const keyboard = {
          inline_keyboard: [[{
            text: 'üìä –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
            web_app: { url: process.env.MINI_APP_URL || 'https://your-app.railway.app' }
          }]]
        };

        this.bot.sendMessage(chatId, statsMessage, {
          reply_markup: keyboard
        });
      } catch (error) {
        console.error('Error getting stats:', error);
        this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ Telegram Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async checkUserStarsBalance(userId) {
    try {
      if (!this.bot) {
        throw new Error('Telegram bot not initialized');
      }

      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Telegram Stars API
      // –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç Telegram Stars API –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
      // –î–ª—è MVP –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Mock –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      
      console.log(`Checking stars balance for user ${userId}`);
      
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Telegram Stars API
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      return {
        user_id: userId,
        balance: Math.floor(Math.random() * 100) + 10, // Mock: 10-110 –∑–≤–µ–∑–¥
        last_updated: new Date().toISOString()
      };
    } catch (error) {
      console.error('Error checking user stars balance:', error);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã Telegram Stars
  async createStarsInvoice(userId, amount, description) {
    try {
      if (!this.bot) {
        throw new Error('Telegram bot not initialized');
      }

      console.log(`Creating stars invoice for user ${userId}, amount: ${amount}`);

      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ Telegram Stars API
      // –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç
      const invoiceId = `inv_${Date.now()}_${userId}`;
      
      return {
        invoice_id: invoiceId,
        amount: amount,
        description: description,
        pay_url: `tg://invoice/${invoiceId}`,
        expires_at: new Date(Date.now() + 15 * 60 * 1000).toISOString() // 15 –º–∏–Ω—É—Ç
      };
    } catch (error) {
      console.error('Error creating stars invoice:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  async checkTransactionStatus(transactionId) {
    try {
      if (!this.bot) {
        throw new Error('Telegram bot not initialized');
      }

      console.log(`Checking transaction status: ${transactionId}`);

      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ Telegram Stars API
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
      const statuses = ['pending', 'completed', 'failed'];
      const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];

      return {
        transaction_id: transactionId,
        status: randomStatus,
        amount: Math.floor(Math.random() * 10) + 1,
        created_at: new Date().toISOString(),
        completed_at: randomStatus === 'completed' ? new Date().toISOString() : null
      };
    } catch (error) {
      console.error('Error checking transaction status:', error);
      throw error;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–∑–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
  async sendPrizeToWinner(userId, amount, raffleId) {
    try {
      if (!this.bot) {
        throw new Error('Telegram bot not initialized');
      }

      console.log(`Sending prize ${amount} stars to user ${userId} for raffle ${raffleId}`);

      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É Telegram Stars –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
      // –ü–æ–∫–∞ –ª–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
      const congratsMessage = `
üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! üéâ

–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ –ª–æ—Ç–µ—Ä–µ–µ ‚Ññ${raffleId}!
üí∞ –í–∞—à –ø—Ä–∏–∑: ${amount} ‚≠ê Telegram Stars

–ó–≤–µ–∑–¥—ã —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç!
–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üöÄ
      `;

      await this.bot.sendMessage(userId, congratsMessage);

      return {
        success: true,
        transaction_id: `prize_${Date.now()}_${userId}`,
        amount: amount,
        sent_at: new Date().toISOString()
      };
    } catch (error) {
      console.error('Error sending prize to winner:', error);
      throw error;
    }
  }

  // –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ª–æ—Ç–µ—Ä–µ–∏
  async refundParticipant(userId, amount, reason) {
    try {
      if (!this.bot) {
        throw new Error('Telegram bot not initialized');
      }

      console.log(`Refunding ${amount} stars to user ${userId}. Reason: ${reason}`);

      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç Telegram Stars
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
      const refundMessage = `
üí∞ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤

–í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${amount} ‚≠ê Telegram Stars
–ü—Ä–∏—á–∏–Ω–∞: ${reason}

–ó–≤–µ–∑–¥—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.
      `;

      await this.bot.sendMessage(userId, refundMessage);

      return {
        success: true,
        transaction_id: `refund_${Date.now()}_${userId}`,
        amount: amount,
        refunded_at: new Date().toISOString()
      };
    } catch (error) {
      console.error('Error refunding participant:', error);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
  async processWebhookUpdate(update) {
    try {
      if (!this.bot) {
        console.warn('Telegram bot not initialized, ignoring webhook');
        return;
      }

      console.log('Processing Telegram webhook update:', update.update_id);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      if (update.message) {
        await this.bot.processUpdate(update);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º pre_checkout_query –¥–ª—è Telegram Stars
      if (update.pre_checkout_query) {
        const query = update.pre_checkout_query;
        console.log('Pre-checkout query received:', query.id);

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        // –ü–æ–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º
        await this.bot.answerPreCheckoutQuery(query.id, true);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º successful_payment
      if (update.message && update.message.successful_payment) {
        const payment = update.message.successful_payment;
        console.log('Successful payment received:', payment);

        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        // –ò –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ª–æ—Ç–µ—Ä–µ—é
      }

    } catch (error) {
      console.error('Error processing webhook update:', error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
  async notifyAdmins(message, data = {}) {
    try {
      if (!this.bot || !process.env.ADMIN_CHAT_ID) {
        console.log('Admin notifications disabled');
        return;
      }

      const adminMessage = `
üö® Admin Notification

${message}

${Object.keys(data).length > 0 ? `Data: ${JSON.stringify(data, null, 2)}` : ''}

Time: ${new Date().toLocaleString('ru-RU')}
      `;

      await this.bot.sendMessage(process.env.ADMIN_CHAT_ID, adminMessage);
    } catch (error) {
      console.error('Error sending admin notification:', error);
    }
  }

  // –ú–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async broadcastMessage(userIds, message) {
    if (!this.bot) return;

    const results = { sent: 0, failed: 0 };

    for (const userId of userIds) {
      try {
        await this.bot.sendMessage(userId, message);
        results.sent++;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (error) {
        console.error(`Failed to send message to user ${userId}:`, error);
        results.failed++;
      }
    }

    console.log(`Broadcast completed: ${results.sent} sent, ${results.failed} failed`);
    return results;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  async getUserInfo(userId) {
    try {
      if (!this.bot) {
        throw new Error('Telegram bot not initialized');
      }

      const chatMember = await this.bot.getChatMember(userId, userId);
      return {
        id: chatMember.user.id,
        username: chatMember.user.username,
        first_name: chatMember.user.first_name,
        last_name: chatMember.user.last_name,
        language_code: chatMember.user.language_code
      };
    } catch (error) {
      console.error('Error getting user info:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Telegram Mini App –¥–∞–Ω–Ω—ã—Ö
  validateWebAppData(initData) {
    try {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Mini App
      // –ò—Å–ø–æ–ª—å–∑—É—è —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
      console.log('Validating web app data:', initData);
      
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      return true;
    } catch (error) {
      console.error('Error validating web app data:', error);
      return false;
    }
  }
}

module.exports = new TelegramService();