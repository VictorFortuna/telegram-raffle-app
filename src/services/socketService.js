class SocketService {
  constructor() {
    this.io = null;
    this.connectedUsers = new Map(); // telegram_id -> socket.id
    this.activeConnections = new Set(); // –∞–∫—Ç–∏–≤–Ω—ã–µ socket.id
  }

  initialize(io) {
    this.io = io;
    this.setupEventHandlers();
    console.log('‚úÖ Socket.IO service initialized');
  }

  setupEventHandlers() {
    if (!this.io) return;

    this.io.on('connection', (socket) => {
      console.log(`üîå User connected: ${socket.id}`);
      this.activeConnections.add(socket.id);

      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      socket.on('authenticate', (data) => {
        try {
          const { telegram_id, username } = data;
          
          if (!telegram_id) {
            socket.emit('auth_error', { message: 'Telegram ID required' });
            return;
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–∫–µ—Ç–æ–º
          this.connectedUsers.set(telegram_id, socket.id);
          socket.telegram_id = telegram_id;
          socket.username = username;

          // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –æ–±—â–µ–π –∫–æ–º–Ω–∞—Ç–µ
          socket.join('global_room');
          
          // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          socket.join(`user_${telegram_id}`);

          console.log(`‚úÖ User authenticated: ${telegram_id} (${username}) -> ${socket.id}`);
          
          socket.emit('authenticated', { 
            success: true, 
            message: 'Successfully authenticated' 
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–∏
          this.sendCurrentRaffleState(socket);

        } catch (error) {
          console.error('Authentication error:', error);
          socket.emit('auth_error', { message: 'Authentication failed' });
        }
      });

      // –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏
      socket.on('get_raffle_status', () => {
        this.sendCurrentRaffleState(socket);
      });

      // –ó–∞–ø—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      socket.on('get_global_stats', () => {
        this.sendGlobalStats(socket);
      });

      // –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –ª–æ—Ç–µ—Ä–µ–π
      socket.on('get_recent_winners', () => {
        this.sendRecentWinners(socket);
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      socket.on('disconnect', () => {
        console.log(`üîå User disconnected: ${socket.id}`);
        
        this.activeConnections.delete(socket.id);
        
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞—Ä—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        if (socket.telegram_id) {
          this.connectedUsers.delete(socket.telegram_id);
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–∫–µ—Ç–∞
      socket.on('error', (error) => {
        console.error(`Socket error ${socket.id}:`, error);
      });
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ–∫–µ—Ç—É
  async sendCurrentRaffleState(socket) {
    try {
      const Raffle = require('../models/Raffle');
      const RaffleSettings = require('../models/RaffleSettings');

      const currentRaffle = await Raffle.getCurrentActive();
      const settings = await RaffleSettings.getCurrent();

      if (currentRaffle && settings) {
        socket.emit('raffle_update', {
          raffle: currentRaffle.getPublicInfo(),
          settings: settings.getPublicInfo(),
          timestamp: new Date().toISOString()
        });
      } else {
        socket.emit('raffle_update', {
          raffle: null,
          settings: settings ? settings.getPublicInfo() : null,
          message: 'No active raffle',
          timestamp: new Date().toISOString()
        });
      }
    } catch (error) {
      console.error('Error sending current raffle state:', error);
      socket.emit('error', { message: 'Failed to get raffle status' });
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async sendGlobalStats(socket) {
    try {
      const User = require('../models/User');
      const Raffle = require('../models/Raffle');

      const [totalUsers, totalRaffles] = await Promise.all([
        User.getTotalUsers(),
        Raffle.getTotalCompleted()
      ]);

      socket.emit('global_stats', {
        total_users: totalUsers,
        total_raffles: totalRaffles,
        active_connections: this.activeConnections.size,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('Error sending global stats:', error);
      socket.emit('error', { message: 'Failed to get global stats' });
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
  async sendRecentWinners(socket) {
    try {
      const Raffle = require('../models/Raffle');
      const recentWinners = await Raffle.getRecentCompleted(5);

      socket.emit('recent_winners', {
        winners: recentWinners.map(raffle => ({
          raffle_id: raffle.id,
          winner_info: raffle.winner_info,
          prize: raffle.winner_prize,
          completed_at: raffle.completed_at
        })),
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('Error sending recent winners:', error);
      socket.emit('error', { message: 'Failed to get recent winners' });
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ
  notifyNewBid(raffleData, bidData) {
    if (!this.io) return;

    const notification = {
      type: 'NEW_BID',
      raffle: {
        id: raffleData.id,
        current_participants: raffleData.current_participants,
        required_participants: raffleData.required_participants,
        total_prize: raffleData.total_prize
      },
      bid: {
        position: bidData.bid_position,
        amount: bidData.amount
      },
      timestamp: new Date().toISOString()
    };

    this.io.to('global_room').emit('raffle_update', notification);
    console.log(`üì¢ Broadcasted new bid: ${raffleData.current_participants}/${raffleData.required_participants}`);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ª–æ—Ç–µ—Ä–µ–∏
  notifyRaffleCompleted(raffleData, winnerData) {
    if (!this.io) return;

    const notification = {
      type: 'RAFFLE_COMPLETED',
      raffle: {
        id: raffleData.id,
        status: 'completed',
        total_participants: raffleData.current_participants,
        total_prize: raffleData.total_prize,
        winner_prize: winnerData.winner_prize,
        completed_at: raffleData.completed_at
      },
      winner: {
        telegram_id: winnerData.winner_id,
        prize: winnerData.winner_prize
      },
      timestamp: new Date().toISOString()
    };

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.io.to('global_room').emit('raffle_completed', notification);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
    if (this.connectedUsers.has(winnerData.winner_id)) {
      const winnerSocketId = this.connectedUsers.get(winnerData.winner_id);
      this.io.to(winnerSocketId).emit('you_won', {
        raffle_id: raffleData.id,
        prize: winnerData.winner_prize,
        message: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!',
        timestamp: new Date().toISOString()
      });
    }

    console.log(`üéâ Broadcasted raffle completion: ${raffleData.id}, winner: ${winnerData.winner_id}`);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –ª–æ—Ç–µ—Ä–µ–∏
  notifyNewRaffleStarted(raffleData, settings) {
    if (!this.io) return;

    const notification = {
      type: 'NEW_RAFFLE_STARTED',
      raffle: raffleData.getPublicInfo(),
      settings: settings.getPublicInfo(),
      message: '–ù–æ–≤–∞—è –ª–æ—Ç–µ—Ä–µ—è –Ω–∞—á–∞–ª–∞—Å—å!',
      timestamp: new Date().toISOString()
    };

    this.io.to('global_room').emit('new_raffle', notification);
    console.log(`üé≤ Broadcasted new raffle started: ${raffleData.id}`);
  }

  // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  notifyUser(telegramId, event, data) {
    if (!this.io || !this.connectedUsers.has(telegramId)) {
      return false; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
    }

    const socketId = this.connectedUsers.get(telegramId);
    this.io.to(socketId).emit(event, {
      ...data,
      timestamp: new Date().toISOString()
    });

    console.log(`üì¨ Sent personal notification to ${telegramId}: ${event}`);
    return true;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  notifyUserStatsUpdate(telegramId, stats) {
    return this.notifyUser(telegramId, 'user_stats_update', stats);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  notifyTransactionError(telegramId, error) {
    return this.notifyUser(telegramId, 'transaction_error', {
      message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
      code: error.code || 'TRANSACTION_ERROR'
    });
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤
  notifyRefund(telegramId, amount, reason) {
    return this.notifyUser(telegramId, 'refund_notification', {
      amount: amount,
      reason: reason,
      message: `–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${amount} –∑–≤–µ–∑–¥. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`
    });
  }

  // –ú–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  broadcastToAll(event, data) {
    if (!this.io) return;

    this.io.to('global_room').emit(event, {
      ...data,
      timestamp: new Date().toISOString()
    });

    console.log(`üì¢ Broadcasted to all users: ${event}`);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö
  notifyMaintenance(message, duration) {
    this.broadcastToAll('maintenance_notification', {
      message: message,
      duration: duration,
      type: 'maintenance'
    });
  }

  // –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  notifySystemMessage(message, type = 'info') {
    this.broadcastToAll('system_message', {
      message: message,
      type: type // info, warning, error, success
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  getConnectionStats() {
    return {
      total_connections: this.activeConnections.size,
      authenticated_users: this.connectedUsers.size,
      rooms: this.io ? Array.from(this.io.sockets.adapter.rooms.keys()) : [],
      timestamp: new Date().toISOString()
    };
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è)
  disconnectUser(telegramId, reason = 'Administrative action') {
    if (!this.connectedUsers.has(telegramId)) {
      return false;
    }

    const socketId = this.connectedUsers.get(telegramId);
    const socket = this.io.sockets.sockets.get(socketId);
    
    if (socket) {
      socket.emit('force_disconnect', { reason });
      socket.disconnect(true);
      console.log(`üîå Force disconnected user ${telegramId}: ${reason}`);
      return true;
    }

    return false;
  }

  // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  cleanup() {
    console.log('üßπ Cleaning up socket connections...');
    
    // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –∫–∞—Ä—Ç—ã
    for (const [telegramId, socketId] of this.connectedUsers.entries()) {
      if (!this.activeConnections.has(socketId)) {
        this.connectedUsers.delete(telegramId);
      }
    }

    console.log(`‚úÖ Cleanup complete. Active: ${this.activeConnections.size}, Authenticated: ${this.connectedUsers.size}`);
  }
}

module.exports = new SocketService();