// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è Telegram Raffle Stars
class AdminPanel {
  constructor() {
    this.apiBase = '/api/admin';
    this.token = localStorage.getItem('admin_token');
    this.isAuthenticated = false;
    this.refreshInterval = null;
    
    this.init();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏
  async init() {
    console.log('üîß Initializing Admin Panel...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
    if (this.token) {
      try {
        await this.verifyToken();
        this.showAdminPanel();
      } catch (error) {
        console.log('Token verification failed, showing login');
        this.showLogin();
      }
    } else {
      this.showLogin();
    }
    
    this.setupEventHandlers();
    this.updateConnectionStatus('disconnected');
  }

  // === –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ===

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
  showLogin() {
    document.getElementById('login-screen').classList.remove('d-none');
    document.getElementById('admin-panel').classList.add('d-none');
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
  showAdminPanel() {
    document.getElementById('login-screen').classList.add('d-none');
    document.getElementById('admin-panel').classList.remove('d-none');
    this.isAuthenticated = true;
    this.loadDashboard();
    this.startAutoRefresh();
  }

  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  async login(username, password) {
    try {
      const response = await fetch(`${this.apiBase}/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password })
      });

      const data = await response.json();
      
      if (data.success) {
        this.token = data.token;
        localStorage.setItem('admin_token', this.token);
        this.showAdminPanel();
        this.showAlert('success', '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      } else {
        throw new Error(data.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
      }
    } catch (error) {
      console.error('Login error:', error);
      this.showLoginError(error.message);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
  async verifyToken() {
    const response = await this.makeRequest('GET', '/system');
    if (!response.success) {
      throw new Error('Token verification failed');
    }
  }

  // –í—ã—Ö–æ–¥
  logout() {
    this.token = null;
    localStorage.removeItem('admin_token');
    this.isAuthenticated = false;
    this.stopAutoRefresh();
    this.showLogin();
  }

  // === HTTP –ó–ê–ü–†–û–°–´ ===

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
  async makeRequest(method, endpoint, data = null) {
    const config = {
      method,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.token}`
      }
    };

    if (data && (method === 'POST' || method === 'PUT')) {
      config.body = JSON.stringify(data);
    }

    try {
      const response = await fetch(`${this.apiBase}${endpoint}`, config);
      const result = await response.json();
      
      if (!response.ok) {
        if (response.status === 401 || response.status === 403) {
          this.logout();
          throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
        }
        throw new Error(result.message || `HTTP ${response.status}`);
      }
      
      return result;
    } catch (error) {
      console.error('API request error:', error);
      throw error;
    }
  }

  // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===

  setupEventHandlers() {
    // –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
    document.getElementById('login-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const submitBtn = e.target.querySelector('button[type="submit"]');
      const btnText = submitBtn.querySelector('.btn-text');
      const spinner = submitBtn.querySelector('.spinner-border');
      
      const username = document.getElementById('username').value;
      const password = document.getElementById('password').value;
      
      try {
        btnText.textContent = '–í—Ö–æ–¥...';
        spinner.classList.remove('d-none');
        submitBtn.disabled = true;
        
        await this.login(username, password);
      } catch (error) {
        // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ login()
      } finally {
        btnText.textContent = '–í–æ–π—Ç–∏';
        spinner.classList.add('d-none');
        submitBtn.disabled = false;
      }
    });

    // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
    document.getElementById('logout-btn').addEventListener('click', (e) => {
      e.preventDefault();
      if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
        this.logout();
      }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
    document.getElementById('refresh-dashboard')?.addEventListener('click', () => {
      this.loadDashboard();
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ—Ç–µ—Ä–µ–∏
    document.getElementById('settings-form')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      await this.saveSettings();
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–∏
    document.getElementById('create-raffle-btn')?.addEventListener('click', async () => {
      await this.createRaffle();
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–π
    document.getElementById('refresh-raffles')?.addEventListener('click', () => {
      this.loadRaffles();
    });

    // –§–∏–ª—å—Ç—Ä –ª–æ—Ç–µ—Ä–µ–π
    document.getElementById('raffle-status-filter')?.addEventListener('change', () => {
      this.loadRaffles();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('#admin-tabs .nav-link').forEach(tab => {
      tab.addEventListener('shown.bs.tab', (e) => {
        const targetTab = e.target.getAttribute('href').substring(1);
        this.handleTabChange(targetTab);
      });
    });
  }

  // === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
  async loadDashboard() {
    try {
      this.updateConnectionStatus('connected');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [systemInfo, globalStats] = await Promise.all([
        this.makeRequest('GET', '/system'),
        fetch('/api/stats/global').then(r => r.json())
      ]);

      this.updateStatsCards(globalStats.stats);
      this.updateSystemInfo(systemInfo.system);
      
    } catch (error) {
      console.error('Dashboard loading error:', error);
      this.showAlert('danger', `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
      this.updateConnectionStatus('disconnected');
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  async loadSettings() {
    try {
      const response = await this.makeRequest('GET', '/settings');
      
      if (response.success && response.current) {
        const settings = response.current;
        
        document.getElementById('required_participants').value = settings.required_participants;
        document.getElementById('bid_amount').value = settings.bid_amount;
        document.getElementById('winner_percentage').value = (settings.winner_percentage * 100).toFixed(0);
        document.getElementById('admin_percentage').value = (settings.admin_percentage * 100).toFixed(0);
      }
    } catch (error) {
      console.error('Settings loading error:', error);
      this.showAlert('danger', `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ—Ç–µ—Ä–µ–π
  async loadRaffles(page = 1) {
    try {
      const status = document.getElementById('raffle-status-filter')?.value || '';
      const params = new URLSearchParams({ page, limit: 20 });
      
      if (status) params.append('status', status);
      
      const response = await this.makeRequest('GET', `/raffles?${params}`);
      
      if (response.success) {
        this.updateRafflesTable(response.raffles);
        this.updateRafflesPagination(response.pagination);
      }
    } catch (error) {
      console.error('Raffles loading error:', error);
      this.showAlert('danger', `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ—Ç–µ—Ä–µ–π: ${error.message}`);
    }
  }

  // === –î–ï–ô–°–¢–í–ò–Ø ===

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  async saveSettings() {
    try {
      const formData = {
        required_participants: parseInt(document.getElementById('required_participants').value),
        bid_amount: parseInt(document.getElementById('bid_amount').value),
        winner_percentage: parseFloat(document.getElementById('winner_percentage').value) / 100,
        admin_percentage: parseFloat(document.getElementById('admin_percentage').value) / 100
      };

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (formData.winner_percentage + formData.admin_percentage !== 1) {
        throw new Error('–°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è 100%');
      }

      const response = await this.makeRequest('PUT', '/settings', formData);
      
      if (response.success) {
        this.showAlert('success', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      }
    } catch (error) {
      console.error('Settings save error:', error);
      this.showAlert('danger', `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–∏
  async createRaffle() {
    if (!confirm('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–æ—Ç–µ—Ä–µ—é?')) return;
    
    try {
      const response = await this.makeRequest('POST', '/raffles/create');
      
      if (response.success) {
        this.showAlert('success', '–ù–æ–≤–∞—è –ª–æ—Ç–µ—Ä–µ—è —Å–æ–∑–¥–∞–Ω–∞');
        this.loadRaffles();
      }
    } catch (error) {
      console.error('Raffle creation error:', error);
      this.showAlert('danger', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏: ${error.message}`);
    }
  }

  // –û—Ç–º–µ–Ω–∞ –ª–æ—Ç–µ—Ä–µ–∏
  async cancelRaffle(raffleId) {
    const reason = prompt('–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã –ª–æ—Ç–µ—Ä–µ–∏:');
    if (!reason) return;
    
    try {
      const response = await this.makeRequest('POST', `/raffles/${raffleId}/cancel`, { reason });
      
      if (response.success) {
        this.showAlert('success', '–õ–æ—Ç–µ—Ä–µ—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        this.loadRaffles();
      }
    } catch (error) {
      console.error('Raffle cancellation error:', error);
      this.showAlert('danger', `–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ª–æ—Ç–µ—Ä–µ–∏: ${error.message}`);
    }
  }

  // === –û–ë–ù–û–í–õ–ï–ù–ò–ï UI ===

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  updateStatsCards(stats) {
    const container = document.getElementById('stats-cards');
    
    const cards = [
      {
        title: '–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        value: this.formatNumber(stats.total_users || 0),
        icon: 'fas fa-users',
        color: 'primary'
      },
      {
        title: '–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á',
        value: this.formatNumber(stats.active_users_24h || 0),
        icon: 'fas fa-user-clock',
        color: 'success'
      },
      {
        title: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ª–æ—Ç–µ—Ä–µ–π',
        value: this.formatNumber(stats.total_raffles_completed || 0),
        icon: 'fas fa-trophy',
        color: 'warning'
      },
      {
        title: '–í—ã–¥–∞–Ω–æ –ø—Ä–∏–∑–æ–≤',
        value: `${this.formatNumber(stats.total_prizes_distributed || 0)} ‚≠ê`,
        icon: 'fas fa-star',
        color: 'info'
      }
    ];

    container.innerHTML = cards.map(card => `
      <div class="col-md-3">
        <div class="card stats-card text-bg-${card.color}">
          <div class="card-body">
            <div class="d-flex align-items-center">
              <div class="flex-shrink-0">
                <i class="${card.icon} fa-2x"></i>
              </div>
              <div class="flex-grow-1 ms-3">
                <div class="stats-number">${card.value}</div>
                <div class="stats-label">${card.title}</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `).join('');
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
  updateSystemInfo(systemInfo) {
    const connectionsContainer = document.getElementById('active-connections');
    
    if (systemInfo.websockets) {
      connectionsContainer.innerHTML = `
        <div class="row">
          <div class="col-6">
            <div class="text-center">
              <div class="h3 text-primary">${systemInfo.websockets.total_connections}</div>
              <div class="text-muted">–í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π</div>
            </div>
          </div>
          <div class="col-6">
            <div class="text-center">
              <div class="h3 text-success">${systemInfo.websockets.authenticated_users}</div>
              <div class="text-muted">–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö</div>
            </div>
          </div>
        </div>
        <hr>
        <small class="text-muted">
          Uptime: ${Math.floor(systemInfo.server.uptime / 60)} –º–∏–Ω<br>
          Memory: ${Math.round(systemInfo.server.memory.heapUsed / 1024 / 1024)} MB
        </small>
      `;
    } else {
      connectionsContainer.innerHTML = '<p class="text-muted">–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>';
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–æ—Ç–µ—Ä–µ–π
  updateRafflesTable(raffles) {
    const tbody = document.getElementById('raffles-table');
    
    if (!raffles || raffles.length === 0) {
      tbody.innerHTML = '<tr><td colspan="7" class="text-center text-muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</td></tr>';
      return;
    }

    tbody.innerHTML = raffles.map(raffle => {
      const statusClass = {
        active: 'success',
        completed: 'primary',
        cancelled: 'danger'
      }[raffle.status] || 'secondary';

      const winnerInfo = raffle.winner_info ? 
        `${raffle.winner_info.first_name || 'User'} (${raffle.winner_prize} ‚≠ê)` : 
        '-';

      return `
        <tr>
          <td>${raffle.id}</td>
          <td><span class="badge bg-${statusClass}">${this.getStatusText(raffle.status)}</span></td>
          <td>${raffle.total_participants || 0}/${raffle.required_participants}</td>
          <td>${raffle.total_prize || 0} ‚≠ê</td>
          <td>${winnerInfo}</td>
          <td>${this.formatDate(raffle.created_at)}</td>
          <td>
            <div class="btn-group btn-group-sm">
              <button class="btn btn-outline-info" onclick="adminPanel.viewRaffleDetails(${raffle.id})">
                <i class="fas fa-eye"></i>
              </button>
              ${raffle.status === 'active' ? `
                <button class="btn btn-outline-danger" onclick="adminPanel.cancelRaffle(${raffle.id})">
                  <i class="fas fa-ban"></i>
                </button>
              ` : ''}
            </div>
          </td>
        </tr>
      `;
    }).join('');
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ª–æ—Ç–µ—Ä–µ–π
  updateRafflesPagination(pagination) {
    const container = document.getElementById('raffles-pagination');
    
    if (!pagination || pagination.totalPages <= 1) {
      container.innerHTML = '';
      return;
    }

    let paginationHtml = '';
    
    // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (pagination.hasPrev) {
      paginationHtml += `
        <li class="page-item">
          <a class="page-link" href="#" onclick="adminPanel.loadRaffles(${pagination.page - 1})">–ù–∞–∑–∞–¥</a>
        </li>
      `;
    }

    // –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    const startPage = Math.max(1, pagination.page - 2);
    const endPage = Math.min(pagination.totalPages, pagination.page + 2);

    for (let i = startPage; i <= endPage; i++) {
      paginationHtml += `
        <li class="page-item ${i === pagination.page ? 'active' : ''}">
          <a class="page-link" href="#" onclick="adminPanel.loadRaffles(${i})">${i}</a>
        </li>
      `;
    }

    // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (pagination.hasNext) {
      paginationHtml += `
        <li class="page-item">
          <a class="page-link" href="#" onclick="adminPanel.loadRaffles(${pagination.page + 1})">–í–ø–µ—Ä–µ–¥</a>
        </li>
      `;
    }

    container.innerHTML = paginationHtml;
  }

  // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–ö–õ–ê–î–û–ö ===

  handleTabChange(tabName) {
    switch (tabName) {
      case 'dashboard':
        this.loadDashboard();
        break;
      case 'raffles':
        this.loadRaffles();
        break;
      case 'settings':
        this.loadSettings();
        break;
      // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }
  }

  // === –£–¢–ò–õ–ò–¢–´ ===

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  updateConnectionStatus(status) {
    const statusElement = document.getElementById('connection-status');
    const statusText = statusElement.querySelector('span');
    
    statusElement.className = `connection-status ${status}`;
    
    switch (status) {
      case 'connected':
        statusText.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
        break;
      case 'disconnected':
        statusText.textContent = '–û—Ç–∫–ª—é—á–µ–Ω–æ';
        break;
      case 'connecting':
        statusText.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
        break;
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  showAlert(type, message, duration = 5000) {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    document.querySelectorAll('.alert-notification').forEach(alert => alert.remove());
    
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show alert-notification`;
    alertDiv.style.position = 'fixed';
    alertDiv.style.top = '20px';
    alertDiv.style.left = '50%';
    alertDiv.style.transform = 'translateX(-50%)';
    alertDiv.style.zIndex = '1060';
    alertDiv.style.minWidth = '300px';
    
    alertDiv.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.body.appendChild(alertDiv);
    
    if (duration > 0) {
      setTimeout(() => alertDiv.remove(), duration);
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤—Ö–æ–¥–∞
  showLoginError(message) {
    const errorDiv = document.getElementById('login-error');
    errorDiv.textContent = message;
    errorDiv.classList.remove('d-none');
    
    setTimeout(() => {
      errorDiv.classList.add('d-none');
    }, 5000);
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
  formatNumber(num) {
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + 'M';
    } else if (num >= 1000) {
      return (num / 1000).toFixed(1) + 'K';
    }
    return num.toString();
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  formatDate(dateString) {
    if (!dateString) return '-';
    
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
  getStatusText(status) {
    const statusMap = {
      active: '–ê–∫—Ç–∏–≤–Ω–∞',
      completed: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
      cancelled: '–û—Ç–º–µ–Ω–µ–Ω–∞'
    };
    return statusMap[status] || status;
  }

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  startAutoRefresh() {
    this.stopAutoRefresh();
    this.refreshInterval = setInterval(() => {
      if (this.isAuthenticated) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        const activeTab = document.querySelector('#admin-tabs .nav-link.active');
        if (activeTab) {
          const tabName = activeTab.getAttribute('href').substring(1);
          if (tabName === 'dashboard') {
            this.loadDashboard();
          } else if (tabName === 'raffles') {
            this.loadRaffles();
          }
        }
      }
    }, 30000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }

  stopAutoRefresh() {
    if (this.refreshInterval) {
      clearInterval(this.refreshInterval);
      this.refreshInterval = null;
    }
  }

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–µ—Ä–µ–∏
  async viewRaffleDetails(raffleId) {
    try {
      const response = await this.makeRequest('GET', `/raffles/${raffleId}`);
      
      if (response.success) {
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ª–æ—Ç–µ—Ä–µ–∏
        this.showRaffleDetailsModal(response.raffle, response.participants);
      }
    } catch (error) {
      this.showAlert('danger', `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π: ${error.message}`);
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ª–æ—Ç–µ—Ä–µ–∏
  showRaffleDetailsModal(raffle, participants) {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π UI
    alert(`–õ–æ—Ç–µ—Ä–µ—è #${raffle.id}\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participants.length}\n–°—Ç–∞—Ç—É—Å: ${raffle.status}`);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  window.adminPanel = new AdminPanel();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ JavaScript
window.addEventListener('error', (e) => {
  console.error('JavaScript error:', e.error);
});

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏
window.addEventListener('beforeunload', (e) => {
  if (window.adminPanel && window.adminPanel.isAuthenticated) {
    e.preventDefault();
    e.returnValue = '';
  }
});