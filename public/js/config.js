// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const CONFIG = {
  // API endpoints
  API_BASE: window.location.origin + '/api',
  WS_URL: window.location.origin,
  
  // Telegram WebApp
  TELEGRAM_WEB_APP: window.Telegram?.WebApp,
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  NOTIFICATION_TIMEOUT: 5000, // 5 —Å–µ–∫—É–Ω–¥
  HEARTBEAT_INTERVAL: 30000,   // 30 —Å–µ–∫—É–Ω–¥
  RECONNECT_ATTEMPTS: 5,
  RECONNECT_DELAY: 2000,       // 2 —Å–µ–∫—É–Ω–¥—ã
  
  // –ê–Ω–∏–º–∞—Ü–∏–∏
  ANIMATION_DURATION: 300,
  
  // –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
  STORAGE_KEYS: {
    AUTH_TOKEN: 'raffle_auth_token',
    USER_DATA: 'raffle_user_data',
    SETTINGS: 'raffle_settings'
  },
  
  // –°–æ–±—ã—Ç–∏—è WebSocket
  SOCKET_EVENTS: {
    AUTHENTICATE: 'authenticate',
    AUTHENTICATED: 'authenticated',
    AUTH_ERROR: 'auth_error',
    RAFFLE_UPDATE: 'raffle_update',
    NEW_BID: 'new_bid',
    RAFFLE_COMPLETED: 'raffle_completed',
    YOU_WON: 'you_won',
    NEW_RAFFLE: 'new_raffle',
    USER_STATS_UPDATE: 'user_stats_update',
    TRANSACTION_ERROR: 'transaction_error',
    REFUND_NOTIFICATION: 'refund_notification',
    ADMIN_MESSAGE: 'admin_message',
    SYSTEM_MESSAGE: 'system_message',
    MAINTENANCE_NOTIFICATION: 'maintenance_notification',
    GET_RAFFLE_STATUS: 'get_raffle_status',
    GET_GLOBAL_STATS: 'get_global_stats',
    GET_RECENT_WINNERS: 'get_recent_winners'
  },
  
  // –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  NOTIFICATION_TYPES: {
    INFO: 'info',
    SUCCESS: 'success',
    WARNING: 'warning',
    ERROR: 'error'
  },
  
  // –°—Ç–∞—Ç—É—Å—ã –ª–æ—Ç–µ—Ä–µ–∏
  RAFFLE_STATUS: {
    ACTIVE: 'active',
    COMPLETED: 'completed',
    CANCELLED: 'cancelled'
  },
  
  // –°—Ç–∞—Ç—É—Å—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  CONNECTION_STATUS: {
    DISCONNECTED: 'disconnected',
    CONNECTING: 'connecting',
    CONNECTED: 'connected',
    RECONNECTING: 'reconnecting'
  },
  
  // –¢–µ–∫—Å—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  TEXTS: {
    LOADING: '–ó–∞–≥—Ä—É–∑–∫–∞...',
    CONNECTING: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...',
    CONNECTED: '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ',
    DISCONNECTED: '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
    RECONNECTING: '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...',
    BID_BUTTON_DEFAULT: '–°–¢–ê–í–ö–ê',
    BID_BUTTON_PARTICIPATING: '–£–ß–ê–°–¢–í–£–ï–¢–ï',
    BID_BUTTON_LOADING: '–û–ñ–ò–î–ê–ù–ò–ï...',
    BID_BUTTON_DISABLED: '–ù–ï–î–û–°–¢–£–ü–ù–û',
    WAITING_PARTICIPANTS: '–û–∂–∏–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...',
    RAFFLE_STARTING: '–õ–æ—Ç–µ—Ä–µ—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!',
    RAFFLE_COMPLETED: '–õ–æ—Ç–µ—Ä–µ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
    NO_WINNERS: '–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π',
    INSUFFICIENT_STARS: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥',
    ALREADY_PARTICIPATING: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ',
    TRANSACTION_PROCESSING: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...',
    CONGRATULATIONS: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!',
    YOU_WON: '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!',
    PRIZE_CREDITED: '–ü—Ä–∏–∑ –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ —Å—á–µ—Ç',
    TRY_AGAIN: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
    CONTINUE: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'
  },
  
  // –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  EMOJI: {
    STAR: '‚≠ê',
    TROPHY: 'üèÜ',
    PARTY: 'üéâ',
    MONEY: 'üí∞',
    FIRE: 'üî•',
    CROWN: 'üëë',
    DIAMOND: 'üíé',
    ROCKET: 'üöÄ',
    WARNING: '‚ö†Ô∏è',
    CHECK: '‚úÖ',
    CROSS: '‚ùå',
    LOADING: '‚è≥'
  }
};

// –§—É–Ω–∫—Ü–∏–∏ —É—Ç–∏–ª–∏—Ç—ã
const UTILS = {
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
  formatNumber: (num) => {
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + 'M';
    } else if (num >= 1000) {
      return (num / 1000).toFixed(1) + 'K';
    }
    return num.toString();
  },
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–≤–µ–∑–¥
  formatStars: (amount) => {
    return `${UTILS.formatNumber(amount)} ${CONFIG.EMOJI.STAR}`;
  },
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  formatTime: (date) => {
    if (!date) return '';
    const now = new Date();
    const diff = now - new Date(date);
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    
    if (days > 0) return `${days}–¥ –Ω–∞–∑–∞–¥`;
    if (hours > 0) return `${hours}—á –Ω–∞–∑–∞–¥`;
    if (minutes > 0) return `${minutes}–º –Ω–∞–∑–∞–¥`;
    return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
  },
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserDisplayName: (user) => {
    if (!user) return 'Anonymous';
    return user.first_name || user.username || 'User';
  },
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã –∏–º–µ–Ω–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
  getUserAvatar: (user) => {
    const name = UTILS.getUserDisplayName(user);
    return name.charAt(0).toUpperCase();
  },
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  isTokenValid: (token) => {
    if (!token) return false;
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      return payload.exp > Date.now() / 1000;
    } catch {
      return false;
    }
  },
  
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
  storage: {
    get: (key) => {
      try {
        const item = localStorage.getItem(key);
        return item ? JSON.parse(item) : null;
      } catch {
        return null;
      }
    },
    
    set: (key, value) => {
      try {
        localStorage.setItem(key, JSON.stringify(value));
        return true;
      } catch {
        return false;
      }
    },
    
    remove: (key) => {
      try {
        localStorage.removeItem(key);
        return true;
      } catch {
        return false;
      }
    }
  },
  
  // –í–∏–±—Ä–∞—Ü–∏—è (–¥–ª—è Telegram WebApp)
  vibrate: (type = 'light') => {
    if (CONFIG.TELEGRAM_WEB_APP && CONFIG.TELEGRAM_WEB_APP.HapticFeedback) {
      CONFIG.TELEGRAM_WEB_APP.HapticFeedback.impactOccurred(type);
    }
  },
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏
  delay: (ms) => new Promise(resolve => setTimeout(resolve, ms)),
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  safeExecute: async (fn, fallback = null) => {
    try {
      return await fn();
    } catch (error) {
      console.error('Safe execute error:', error);
      return fallback;
    }
  },
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
  isOnline: () => navigator.onLine,
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
  generateId: () => {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  },
  
  // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
  animateNumber: (element, from, to, duration = 1000) => {
    const start = performance.now();
    const range = to - from;
    
    const update = (current) => {
      const elapsed = current - start;
      const progress = Math.min(elapsed / duration, 1);
      const easeOut = 1 - Math.pow(1 - progress, 3);
      const current_value = Math.round(from + range * easeOut);
      
      element.textContent = current_value;
      
      if (progress < 1) {
        requestAnimationFrame(update);
      }
    };
    
    requestAnimationFrame(update);
  },
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebGL (–¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤)
  hasWebGL: () => {
    try {
      const canvas = document.createElement('canvas');
      return !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));
    } catch {
      return false;
    }
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
window.CONFIG = CONFIG;
window.UTILS = UTILS;